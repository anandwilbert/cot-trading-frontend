"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/highlight-words";
exports.ids = ["vendor-chunks/highlight-words"];
exports.modules = {

/***/ "(ssr)/./node_modules/highlight-words/dist/highlight-words.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/highlight-words/dist/highlight-words.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ highlightWords)\n/* harmony export */ });\nconst hasProp = (prop) => (obj) => obj !== null && typeof obj === \"object\" && prop in obj;\nconst hasMatch = hasProp(\"match\");\nconst chunkExists = (chunk) => typeof chunk !== \"undefined\";\nfunction clip({\n  curr,\n  next,\n  prev,\n  clipBy = 3\n}) {\n  const words = curr.text.split(\" \");\n  const len = words.length;\n  if (curr.match || clipBy >= len) {\n    return curr.text;\n  }\n  const ellipsis = \"...\";\n  if (chunkExists(next) && chunkExists(prev) && hasMatch(prev) && hasMatch(next)) {\n    if (len > clipBy * 2) {\n      return [\n        ...words.slice(0, clipBy),\n        ellipsis,\n        ...words.slice(-clipBy)\n      ].join(\" \");\n    }\n    return curr.text;\n  }\n  if (chunkExists(next) && hasMatch(next)) {\n    return [ellipsis, ...words.slice(-clipBy)].join(\" \");\n  }\n  if (chunkExists(prev) && hasMatch(prev)) {\n    return [...words.slice(0, clipBy), ellipsis].join(\" \");\n  }\n  return curr.text;\n}\n\nconst escapeRegexp = (term) => term.replace(/[|\\\\{}()[\\]^$+*?.-]/g, (char) => `\\\\${char}`);\nconst termsToRegExpString = (terms) => terms.replace(/\\s{2,}/g, \" \").split(\" \").join(\"|\");\nconst regexpQuery = ({\n  terms,\n  matchExactly = false\n}) => {\n  if (typeof terms !== \"string\") {\n    throw new TypeError(\"Expected a string\");\n  }\n  const escapedTerms = escapeRegexp(terms.trim());\n  return `(${matchExactly ? escapedTerms : termsToRegExpString(escapedTerms)})`;\n};\nconst buildRegexp = ({\n  terms,\n  matchExactly = false\n}) => {\n  try {\n    const fromString = /^([/~@;%#'])(.*?)\\1([gimsuy]*)$/.exec(terms);\n    if (fromString) {\n      return new RegExp(fromString[2], fromString[3]);\n    }\n    return new RegExp(regexpQuery({ terms, matchExactly }), \"ig\");\n  } catch {\n    throw new TypeError(\"Expected terms to be either a string or a RegExp!\");\n  }\n};\n\nlet IDX = 36;\nlet HEX = \"\";\nwhile (IDX--) {\n  HEX += IDX.toString(36);\n}\nfunction uid(len = 11) {\n  let str = \"\";\n  let num = len;\n  while (num--) {\n    str += HEX[Math.random() * 36 | 0];\n  }\n  return str;\n}\n\nconst hasLength = (str) => str.length > 0;\nconst highlightWords = ({\n  text,\n  query,\n  clipBy,\n  matchExactly = false\n}) => {\n  const safeQuery = typeof query === \"string\" ? query.trim() : query;\n  if (safeQuery === \"\") {\n    return [\n      {\n        key: uid(),\n        text,\n        match: false\n      }\n    ];\n  }\n  const searchRegexp = buildRegexp({ terms: query, matchExactly });\n  return text.split(searchRegexp).filter(hasLength).map((str) => ({\n    // Compose the object for a match\n    key: uid(),\n    text: str,\n    match: matchExactly ? str.toLowerCase() === safeQuery.toLowerCase() : searchRegexp.test(str)\n  })).map((chunk, index, chunks) => ({\n    // For each chunk, clip the text if needed\n    ...chunk,\n    // All the props first\n    ...typeof clipBy === \"number\" && {\n      // We only overwrite the text if there is a clip\n      text: clip({\n        curr: chunk,\n        // We need the current chunk\n        ...index < chunks.length - 1 && { next: chunks[index + 1] },\n        // If this wasn't the last chunk, set the next chunk\n        ...index > 0 && { prev: chunks[index - 1] },\n        // If this wasn't the first chunk, set the previous chunk\n        clipBy\n      })\n    }\n  }));\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LXdvcmRzL2Rpc3QvaGlnaGxpZ2h0LXdvcmRzLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbURBQW1ELGdDQUFnQyxLQUFLO0FBQ3hGLHlEQUF5RCxHQUFHO0FBQzVEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZ0VBQWdFO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxxQkFBcUI7QUFDekQsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsNEJBQTRCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyx5QkFBeUI7QUFDbkU7QUFDQSwwQkFBMEIseUJBQXlCO0FBQ25EO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0g7O0FBRXFDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXHdhbmFuXFxXb3Jrc3BhY2VcXHZzY29kZVxcdHJhZGluZ1xcd2ViYXBwXFxjb3QtdHJhZGluZy1mcm9udGVuZFxcbm9kZV9tb2R1bGVzXFxoaWdobGlnaHQtd29yZHNcXGRpc3RcXGhpZ2hsaWdodC13b3Jkcy5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgaGFzUHJvcCA9IChwcm9wKSA9PiAob2JqKSA9PiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiAmJiBwcm9wIGluIG9iajtcbmNvbnN0IGhhc01hdGNoID0gaGFzUHJvcChcIm1hdGNoXCIpO1xuY29uc3QgY2h1bmtFeGlzdHMgPSAoY2h1bmspID0+IHR5cGVvZiBjaHVuayAhPT0gXCJ1bmRlZmluZWRcIjtcbmZ1bmN0aW9uIGNsaXAoe1xuICBjdXJyLFxuICBuZXh0LFxuICBwcmV2LFxuICBjbGlwQnkgPSAzXG59KSB7XG4gIGNvbnN0IHdvcmRzID0gY3Vyci50ZXh0LnNwbGl0KFwiIFwiKTtcbiAgY29uc3QgbGVuID0gd29yZHMubGVuZ3RoO1xuICBpZiAoY3Vyci5tYXRjaCB8fCBjbGlwQnkgPj0gbGVuKSB7XG4gICAgcmV0dXJuIGN1cnIudGV4dDtcbiAgfVxuICBjb25zdCBlbGxpcHNpcyA9IFwiLi4uXCI7XG4gIGlmIChjaHVua0V4aXN0cyhuZXh0KSAmJiBjaHVua0V4aXN0cyhwcmV2KSAmJiBoYXNNYXRjaChwcmV2KSAmJiBoYXNNYXRjaChuZXh0KSkge1xuICAgIGlmIChsZW4gPiBjbGlwQnkgKiAyKSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICAuLi53b3Jkcy5zbGljZSgwLCBjbGlwQnkpLFxuICAgICAgICBlbGxpcHNpcyxcbiAgICAgICAgLi4ud29yZHMuc2xpY2UoLWNsaXBCeSlcbiAgICAgIF0uam9pbihcIiBcIik7XG4gICAgfVxuICAgIHJldHVybiBjdXJyLnRleHQ7XG4gIH1cbiAgaWYgKGNodW5rRXhpc3RzKG5leHQpICYmIGhhc01hdGNoKG5leHQpKSB7XG4gICAgcmV0dXJuIFtlbGxpcHNpcywgLi4ud29yZHMuc2xpY2UoLWNsaXBCeSldLmpvaW4oXCIgXCIpO1xuICB9XG4gIGlmIChjaHVua0V4aXN0cyhwcmV2KSAmJiBoYXNNYXRjaChwcmV2KSkge1xuICAgIHJldHVybiBbLi4ud29yZHMuc2xpY2UoMCwgY2xpcEJ5KSwgZWxsaXBzaXNdLmpvaW4oXCIgXCIpO1xuICB9XG4gIHJldHVybiBjdXJyLnRleHQ7XG59XG5cbmNvbnN0IGVzY2FwZVJlZ2V4cCA9ICh0ZXJtKSA9PiB0ZXJtLnJlcGxhY2UoL1t8XFxcXHt9KClbXFxdXiQrKj8uLV0vZywgKGNoYXIpID0+IGBcXFxcJHtjaGFyfWApO1xuY29uc3QgdGVybXNUb1JlZ0V4cFN0cmluZyA9ICh0ZXJtcykgPT4gdGVybXMucmVwbGFjZSgvXFxzezIsfS9nLCBcIiBcIikuc3BsaXQoXCIgXCIpLmpvaW4oXCJ8XCIpO1xuY29uc3QgcmVnZXhwUXVlcnkgPSAoe1xuICB0ZXJtcyxcbiAgbWF0Y2hFeGFjdGx5ID0gZmFsc2Vcbn0pID0+IHtcbiAgaWYgKHR5cGVvZiB0ZXJtcyAhPT0gXCJzdHJpbmdcIikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJFeHBlY3RlZCBhIHN0cmluZ1wiKTtcbiAgfVxuICBjb25zdCBlc2NhcGVkVGVybXMgPSBlc2NhcGVSZWdleHAodGVybXMudHJpbSgpKTtcbiAgcmV0dXJuIGAoJHttYXRjaEV4YWN0bHkgPyBlc2NhcGVkVGVybXMgOiB0ZXJtc1RvUmVnRXhwU3RyaW5nKGVzY2FwZWRUZXJtcyl9KWA7XG59O1xuY29uc3QgYnVpbGRSZWdleHAgPSAoe1xuICB0ZXJtcyxcbiAgbWF0Y2hFeGFjdGx5ID0gZmFsc2Vcbn0pID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBmcm9tU3RyaW5nID0gL14oWy9+QDslIyddKSguKj8pXFwxKFtnaW1zdXldKikkLy5leGVjKHRlcm1zKTtcbiAgICBpZiAoZnJvbVN0cmluZykge1xuICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoZnJvbVN0cmluZ1syXSwgZnJvbVN0cmluZ1szXSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUmVnRXhwKHJlZ2V4cFF1ZXJ5KHsgdGVybXMsIG1hdGNoRXhhY3RseSB9KSwgXCJpZ1wiKTtcbiAgfSBjYXRjaCB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkIHRlcm1zIHRvIGJlIGVpdGhlciBhIHN0cmluZyBvciBhIFJlZ0V4cCFcIik7XG4gIH1cbn07XG5cbmxldCBJRFggPSAzNjtcbmxldCBIRVggPSBcIlwiO1xud2hpbGUgKElEWC0tKSB7XG4gIEhFWCArPSBJRFgudG9TdHJpbmcoMzYpO1xufVxuZnVuY3Rpb24gdWlkKGxlbiA9IDExKSB7XG4gIGxldCBzdHIgPSBcIlwiO1xuICBsZXQgbnVtID0gbGVuO1xuICB3aGlsZSAobnVtLS0pIHtcbiAgICBzdHIgKz0gSEVYW01hdGgucmFuZG9tKCkgKiAzNiB8IDBdO1xuICB9XG4gIHJldHVybiBzdHI7XG59XG5cbmNvbnN0IGhhc0xlbmd0aCA9IChzdHIpID0+IHN0ci5sZW5ndGggPiAwO1xuY29uc3QgaGlnaGxpZ2h0V29yZHMgPSAoe1xuICB0ZXh0LFxuICBxdWVyeSxcbiAgY2xpcEJ5LFxuICBtYXRjaEV4YWN0bHkgPSBmYWxzZVxufSkgPT4ge1xuICBjb25zdCBzYWZlUXVlcnkgPSB0eXBlb2YgcXVlcnkgPT09IFwic3RyaW5nXCIgPyBxdWVyeS50cmltKCkgOiBxdWVyeTtcbiAgaWYgKHNhZmVRdWVyeSA9PT0gXCJcIikge1xuICAgIHJldHVybiBbXG4gICAgICB7XG4gICAgICAgIGtleTogdWlkKCksXG4gICAgICAgIHRleHQsXG4gICAgICAgIG1hdGNoOiBmYWxzZVxuICAgICAgfVxuICAgIF07XG4gIH1cbiAgY29uc3Qgc2VhcmNoUmVnZXhwID0gYnVpbGRSZWdleHAoeyB0ZXJtczogcXVlcnksIG1hdGNoRXhhY3RseSB9KTtcbiAgcmV0dXJuIHRleHQuc3BsaXQoc2VhcmNoUmVnZXhwKS5maWx0ZXIoaGFzTGVuZ3RoKS5tYXAoKHN0cikgPT4gKHtcbiAgICAvLyBDb21wb3NlIHRoZSBvYmplY3QgZm9yIGEgbWF0Y2hcbiAgICBrZXk6IHVpZCgpLFxuICAgIHRleHQ6IHN0cixcbiAgICBtYXRjaDogbWF0Y2hFeGFjdGx5ID8gc3RyLnRvTG93ZXJDYXNlKCkgPT09IHNhZmVRdWVyeS50b0xvd2VyQ2FzZSgpIDogc2VhcmNoUmVnZXhwLnRlc3Qoc3RyKVxuICB9KSkubWFwKChjaHVuaywgaW5kZXgsIGNodW5rcykgPT4gKHtcbiAgICAvLyBGb3IgZWFjaCBjaHVuaywgY2xpcCB0aGUgdGV4dCBpZiBuZWVkZWRcbiAgICAuLi5jaHVuayxcbiAgICAvLyBBbGwgdGhlIHByb3BzIGZpcnN0XG4gICAgLi4udHlwZW9mIGNsaXBCeSA9PT0gXCJudW1iZXJcIiAmJiB7XG4gICAgICAvLyBXZSBvbmx5IG92ZXJ3cml0ZSB0aGUgdGV4dCBpZiB0aGVyZSBpcyBhIGNsaXBcbiAgICAgIHRleHQ6IGNsaXAoe1xuICAgICAgICBjdXJyOiBjaHVuayxcbiAgICAgICAgLy8gV2UgbmVlZCB0aGUgY3VycmVudCBjaHVua1xuICAgICAgICAuLi5pbmRleCA8IGNodW5rcy5sZW5ndGggLSAxICYmIHsgbmV4dDogY2h1bmtzW2luZGV4ICsgMV0gfSxcbiAgICAgICAgLy8gSWYgdGhpcyB3YXNuJ3QgdGhlIGxhc3QgY2h1bmssIHNldCB0aGUgbmV4dCBjaHVua1xuICAgICAgICAuLi5pbmRleCA+IDAgJiYgeyBwcmV2OiBjaHVua3NbaW5kZXggLSAxXSB9LFxuICAgICAgICAvLyBJZiB0aGlzIHdhc24ndCB0aGUgZmlyc3QgY2h1bmssIHNldCB0aGUgcHJldmlvdXMgY2h1bmtcbiAgICAgICAgY2xpcEJ5XG4gICAgICB9KVxuICAgIH1cbiAgfSkpO1xufTtcblxuZXhwb3J0IHsgaGlnaGxpZ2h0V29yZHMgYXMgZGVmYXVsdCB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight-words/dist/highlight-words.mjs\n");

/***/ })

};
;